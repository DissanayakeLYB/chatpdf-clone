<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>DocChat - AI PDF Assistant</title>
        <link
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
            rel="stylesheet"
        />
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }

            body {
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI",
                    Roboto, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                display: flex;
                flex-direction: column;
            }

            .header {
                background: rgba(255, 255, 255, 0.1);
                backdrop-filter: blur(10px);
                padding: 1rem 2rem;
                border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            }

            .header h1 {
                color: white;
                font-size: 1.8rem;
                font-weight: 600;
            }

            .container {
                flex: 1;
                display: flex;
                max-width: 1400px;
                margin: 0 auto;
                width: 100%;
                gap: 1rem;
                padding: 1rem;
            }

            .sidebar {
                width: 300px;
                background: rgba(255, 255, 255, 0.95);
                border-radius: 12px;
                padding: 1.5rem;
                height: fit-content;
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            }

            .main-content {
                flex: 1;
                background: rgba(255, 255, 255, 0.95);
                border-radius: 12px;
                display: flex;
                flex-direction: column;
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
                overflow: hidden;
            }

            .upload-section {
                padding: 1.5rem;
                border-bottom: 1px solid #e0e7ff;
            }

            .upload-area {
                border: 2px dashed #c7d2fe;
                border-radius: 8px;
                padding: 2rem;
                text-align: center;
                cursor: pointer;
                transition: all 0.3s ease;
                background: #f8fafc;
            }

            .upload-area:hover {
                border-color: #8b5cf6;
                background: #faf5ff;
            }

            .upload-area.dragover {
                border-color: #8b5cf6;
                background: #f3e8ff;
            }

            .upload-icon {
                font-size: 3rem;
                color: #8b5cf6;
                margin-bottom: 1rem;
            }

            .file-input {
                display: none;
            }

            .btn {
                background: linear-gradient(135deg, #8b5cf6, #7c3aed);
                color: white;
                border: none;
                padding: 0.75rem 1.5rem;
                border-radius: 8px;
                cursor: pointer;
                font-weight: 500;
                transition: all 0.3s ease;
                display: inline-flex;
                align-items: center;
                gap: 0.5rem;
            }

            .btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(139, 92, 246, 0.3);
            }

            .btn:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }

            .chat-container {
                flex: 1;
                display: flex;
                flex-direction: column;
                min-height: 400px;
            }

            .messages {
                flex: 1;
                padding: 1.5rem;
                overflow-y: auto;
                max-height: 500px;
            }

            .message {
                margin-bottom: 1rem;
                display: flex;
                gap: 0.75rem;
            }

            .message.user {
                flex-direction: row-reverse;
            }

            .message-avatar {
                width: 32px;
                height: 32px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 0.875rem;
                flex-shrink: 0;
            }

            .user .message-avatar {
                background: linear-gradient(135deg, #8b5cf6, #7c3aed);
                color: white;
            }

            .assistant .message-avatar {
                background: #f1f5f9;
                color: #64748b;
            }

            .message-content {
                background: #f8fafc;
                padding: 0.875rem 1.125rem;
                border-radius: 12px;
                max-width: 70%;
                line-height: 1.5;
            }

            .user .message-content {
                background: linear-gradient(135deg, #8b5cf6, #7c3aed);
                color: white;
            }

            .chat-input {
                padding: 1.5rem;
                border-top: 1px solid #e0e7ff;
                background: #fafbff;
            }

            .input-container {
                display: flex;
                gap: 0.75rem;
                align-items: flex-end;
            }

            .message-input {
                flex: 1;
                border: 1px solid #d1d5db;
                border-radius: 8px;
                padding: 0.75rem;
                resize: none;
                font-family: inherit;
                line-height: 1.5;
                max-height: 120px;
            }

            .message-input:focus {
                outline: none;
                border-color: #8b5cf6;
                box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
            }

            .document-item {
                background: #f8fafc;
                border: 1px solid #e2e8f0;
                border-radius: 8px;
                padding: 1rem;
                margin-bottom: 0.75rem;
            }

            .document-name {
                font-weight: 600;
                color: #1e293b;
                margin-bottom: 0.25rem;
            }

            .document-meta {
                font-size: 0.875rem;
                color: #64748b;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .delete-btn {
                background: #ef4444;
                color: white;
                border: none;
                padding: 0.25rem 0.5rem;
                border-radius: 4px;
                cursor: pointer;
                font-size: 0.75rem;
            }

            .loading {
                display: flex;
                align-items: center;
                gap: 0.5rem;
                color: #64748b;
                font-style: italic;
            }

            .spinner {
                width: 16px;
                height: 16px;
                border: 2px solid #e2e8f0;
                border-top: 2px solid #8b5cf6;
                border-radius: 50%;
                animation: spin 1s linear infinite;
            }

            @keyframes spin {
                0% {
                    transform: rotate(0deg);
                }
                100% {
                    transform: rotate(360deg);
                }
            }

            .error {
                background: #fef2f2;
                color: #dc2626;
                padding: 0.75rem;
                border-radius: 8px;
                margin-bottom: 1rem;
                border: 1px solid #fecaca;
            }

            .success {
                background: #f0fdf4;
                color: #16a34a;
                padding: 0.75rem;
                border-radius: 8px;
                margin-bottom: 1rem;
                border: 1px solid #bbf7d0;
            }

            .api-config {
                background: #fffbeb;
                border: 1px solid #fed7aa;
                border-radius: 8px;
                padding: 1rem;
                margin-bottom: 1rem;
            }

            .api-input {
                width: 100%;
                padding: 0.5rem;
                border: 1px solid #d1d5db;
                border-radius: 6px;
                margin-top: 0.5rem;
            }

            @media (max-width: 768px) {
                .container {
                    flex-direction: column;
                    padding: 0.5rem;
                }

                .sidebar {
                    width: 100%;
                    order: 2;
                }

                .message-content {
                    max-width: 85%;
                }
            }
        </style>
    </head>
    <body>
        <div class="header">
            <h1><i class="fas fa-file-pdf"></i> DocChat - AI PDF Assistant</h1>
        </div>

        <div class="container">
            <div class="sidebar">
                <div class="api-config">
                    <label for="apiKey"
                        ><strong>ChatPDF API Key:</strong></label
                    >
                    <input
                        type="password"
                        id="apiKey"
                        class="api-input"
                        placeholder="Enter your ChatPDF API key"
                    />
                    <button
                        onclick="saveApiKey()"
                        class="btn"
                        style="
                            margin-top: 0.5rem;
                            font-size: 0.875rem;
                            padding: 0.5rem 1rem;
                        "
                    >
                        <i class="fas fa-save"></i> Save Key
                    </button>
                </div>

                <h3 style="margin-bottom: 1rem; color: #1e293b">
                    <i class="fas fa-folder"></i> Documents
                </h3>
                <div id="documentsList">
                    <p style="color: #64748b; font-style: italic">
                        No documents uploaded yet
                    </p>
                </div>
            </div>

            <div class="main-content">
                <div class="upload-section">
                    <div
                        class="upload-area"
                        onclick="document.getElementById('fileInput').click()"
                    >
                        <div class="upload-icon">
                            <i class="fas fa-cloud-upload-alt"></i>
                        </div>
                        <h3 style="margin-bottom: 0.5rem; color: #1e293b">
                            Upload PDF Document
                        </h3>
                        <p style="color: #64748b">
                            Click here or drag and drop your PDF file
                        </p>
                        <input
                            type="file"
                            id="fileInput"
                            class="file-input"
                            accept=".pdf"
                            onchange="handleFileUpload(event)"
                        />
                    </div>
                </div>

                <div class="chat-container">
                    <div class="messages" id="messages">
                        <div class="message assistant">
                            <div class="message-avatar">
                                <i class="fas fa-robot"></i>
                            </div>
                            <div class="message-content">
                                Welcome! Upload a PDF document to start chatting
                                with it. I can answer questions, summarize
                                content, and help you understand your documents.
                            </div>
                        </div>
                    </div>

                    <div class="chat-input">
                        <div class="input-container">
                            <textarea
                                id="messageInput"
                                class="message-input"
                                placeholder="Ask a question about your document..."
                                rows="2"
                                onkeydown="handleKeyDown(event)"
                            ></textarea>
                            <button
                                onclick="sendMessage()"
                                class="btn"
                                id="sendBtn"
                            >
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script>
            let currentSourceId = null;
            let documents = [];
            let apiKey = "";

            // Initialize
            window.onload = function () {
                loadApiKey();
                setupDragAndDrop();
            };

            function loadApiKey() {
                // In a real app, you'd want to store this securely
                const stored = prompt("Please enter your ChatPDF API key:");
                if (stored) {
                    apiKey = stored;
                    document.getElementById("apiKey").value = stored;
                }
            }

            function saveApiKey() {
                const key = document.getElementById("apiKey").value.trim();
                if (key) {
                    apiKey = key;
                    showMessage("API key saved successfully!", "success");
                } else {
                    showMessage("Please enter a valid API key", "error");
                }
            }

            function setupDragAndDrop() {
                const uploadArea = document.querySelector(".upload-area");

                uploadArea.addEventListener("dragover", (e) => {
                    e.preventDefault();
                    uploadArea.classList.add("dragover");
                });

                uploadArea.addEventListener("dragleave", () => {
                    uploadArea.classList.remove("dragover");
                });

                uploadArea.addEventListener("drop", (e) => {
                    e.preventDefault();
                    uploadArea.classList.remove("dragover");

                    const files = e.dataTransfer.files;
                    if (files.length > 0) {
                        handleFile(files[0]);
                    }
                });
            }

            function handleFileUpload(event) {
                const file = event.target.files[0];
                if (file) {
                    handleFile(file);
                }
            }

            async function handleFile(file) {
                if (!apiKey) {
                    showMessage(
                        "Please enter your ChatPDF API key first",
                        "error"
                    );
                    return;
                }

                if (file.type !== "application/pdf") {
                    showMessage("Please upload a PDF file", "error");
                    return;
                }

                if (file.size > 32 * 1024 * 1024) {
                    // 32MB limit
                    showMessage("File size must be less than 32MB", "error");
                    return;
                }

                const formData = new FormData();
                formData.append("file", file);

                try {
                    showMessage("Uploading document...", "loading");

                    const response = await fetch(
                        "https://api.chatpdf.com/v1/sources/add-file",
                        {
                            method: "POST",
                            headers: {
                                "x-api-key": apiKey,
                            },
                            body: formData,
                        }
                    );

                    const result = await response.json();

                    if (response.ok) {
                        currentSourceId = result.sourceId;
                        const doc = {
                            id: result.sourceId,
                            name: file.name,
                            size: file.size,
                            uploadTime: new Date().toLocaleString(),
                        };
                        documents.push(doc);

                        updateDocumentsList();
                        showMessage(
                            `Successfully uploaded: ${file.name}`,
                            "success"
                        );

                        // Clear the file input
                        document.getElementById("fileInput").value = "";
                    } else {
                        throw new Error(result.message || "Upload failed");
                    }
                } catch (error) {
                    console.error("Upload error:", error);
                    showMessage(`Upload failed: ${error.message}`, "error");
                }
            }

            function updateDocumentsList() {
                const docsList = document.getElementById("documentsList");

                if (documents.length === 0) {
                    docsList.innerHTML =
                        '<p style="color: #64748b; font-style: italic;">No documents uploaded yet</p>';
                    return;
                }

                docsList.innerHTML = documents
                    .map(
                        (doc) => `
                <div class="document-item">
                    <div class="document-name">${doc.name}</div>
                    <div class="document-meta">
                        <span>${formatFileSize(doc.size)} • ${
                            doc.uploadTime
                        }</span>
                        <button class="delete-btn" onclick="deleteDocument('${
                            doc.id
                        }')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `
                    )
                    .join("");
            }

            function formatFileSize(bytes) {
                if (bytes === 0) return "0 Bytes";
                const k = 1024;
                const sizes = ["Bytes", "KB", "MB", "GB"];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return (
                    parseFloat((bytes / Math.pow(k, i)).toFixed(2)) +
                    " " +
                    sizes[i]
                );
            }

            async function deleteDocument(sourceId) {
                if (
                    !confirm("Are you sure you want to delete this document?")
                ) {
                    return;
                }

                try {
                    await fetch(`https://api.chatpdf.com/v1/sources/delete`, {
                        method: "POST",
                        headers: {
                            "x-api-key": apiKey,
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({ sources: [sourceId] }),
                    });

                    documents = documents.filter((doc) => doc.id !== sourceId);

                    if (currentSourceId === sourceId) {
                        currentSourceId =
                            documents.length > 0
                                ? documents[documents.length - 1].id
                                : null;
                    }

                    updateDocumentsList();
                    showMessage("Document deleted successfully", "success");
                } catch (error) {
                    console.error("Delete error:", error);
                    showMessage("Failed to delete document", "error");
                }
            }

            function handleKeyDown(event) {
                if (event.key === "Enter" && !event.shiftKey) {
                    event.preventDefault();
                    sendMessage();
                }
            }

            async function sendMessage() {
                if (!apiKey) {
                    showMessage(
                        "Please enter your ChatPDF API key first",
                        "error"
                    );
                    return;
                }

                if (!currentSourceId) {
                    showMessage("Please upload a PDF document first", "error");
                    return;
                }

                const messageInput = document.getElementById("messageInput");
                const message = messageInput.value.trim();

                if (!message) return;

                // Add user message to chat
                addMessageToChat(message, "user");
                messageInput.value = "";

                // Show loading state
                const loadingId = addMessageToChat(
                    "Thinking...",
                    "assistant",
                    true
                );

                try {
                    const response = await fetch(
                        "https://api.chatpdf.com/v1/chats/message",
                        {
                            method: "POST",
                            headers: {
                                "x-api-key": apiKey,
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify({
                                sourceId: currentSourceId,
                                messages: [
                                    {
                                        role: "user",
                                        content: message,
                                    },
                                ],
                            }),
                        }
                    );

                    const result = await response.json();

                    // Remove loading message
                    document.getElementById(loadingId).remove();

                    if (response.ok) {
                        addMessageToChat(result.content, "assistant");
                    } else {
                        throw new Error(
                            result.message || "Failed to get response"
                        );
                    }
                } catch (error) {
                    console.error("Chat error:", error);
                    document.getElementById(loadingId).remove();
                    addMessageToChat(
                        `Sorry, I encountered an error: ${error.message}`,
                        "assistant"
                    );
                }
            }

            function addMessageToChat(content, sender, isLoading = false) {
                const messagesContainer = document.getElementById("messages");
                const messageId = `msg-${Date.now()}-${Math.random()
                    .toString(36)
                    .substr(2, 9)}`;

                const messageDiv = document.createElement("div");
                messageDiv.className = `message ${sender}`;
                messageDiv.id = messageId;

                const avatar =
                    sender === "user"
                        ? '<i class="fas fa-user"></i>'
                        : '<i class="fas fa-robot"></i>';
                const loadingSpinner = isLoading
                    ? '<div class="spinner"></div>'
                    : "";

                messageDiv.innerHTML = `
                <div class="message-avatar">${avatar}</div>
                <div class="message-content">
                    ${
                        isLoading
                            ? `<div class="loading">${loadingSpinner} ${content}</div>`
                            : content
                    }
                </div>
            `;

                messagesContainer.appendChild(messageDiv);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;

                return messageId;
            }

            function showMessage(message, type) {
                // Remove existing messages
                const existing = document.querySelector(
                    ".error, .success, .loading"
                );
                if (existing) {
                    existing.remove();
                }

                const messageDiv = document.createElement("div");
                messageDiv.className = type;

                if (type === "loading") {
                    messageDiv.innerHTML = `<div class="loading"><div class="spinner"></div> ${message}</div>`;
                } else {
                    messageDiv.textContent = message;
                }

                const uploadSection = document.querySelector(".upload-section");
                uploadSection.insertBefore(
                    messageDiv,
                    uploadSection.firstChild
                );

                if (type !== "loading") {
                    setTimeout(() => {
                        if (messageDiv.parentNode) {
                            messageDiv.remove();
                        }
                    }, 5000);
                }
            }
        </script>
    </body>
</html>
